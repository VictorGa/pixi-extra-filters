{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/filters/bulgepinch/BulgePinchFilter.js","pixi-extra-filters.min.js","src/filters/colorreplace/ColorReplaceFilter.js","src/filters/glow/GlowFilter.js","src/filters/hashedblur/HashedblurFilter.js","src/filters/outline/OutlineFilter.js","src/filters/radialblur/RadialblurFilter.js","src/filters/radialblurmask/RadialblurMaskFilter.js","src/filters/simplelightmap/SimpleLightmapFilter.js","src/index"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","BulgePinchFilter","PIXI","Filter","this","prototype","Object","create","constructor","defineProperties","radius","get","uniforms","set","value","strength","center","2","ColorReplaceFilter","originalColor","newColor","epsilon","defineProperty","g","b","x","y","z","3","GlowFilter","viewWidth","viewHeight","distance","outerStrength","innerStrength","color","quality","glowColor","Float32Array","Math","pow","utils","rgb2hex","hex2rgb","pixelWidth","pixelHeight","4","HashedblurFilter","iResolution","iMouse","type","blur","5","OutlineFilter","thickness","replace","toFixed","outlineColor","6","RadialblurFilter","7","RadialblurMaskFilter","8","SimpleLightmapFilter","lightmapTexture","ambientColor","resolution","u_lightmap","texture","9","RadialBlur","RadialBlurMask","HashedBlur","filter","filters","./filters/bulgepinch/BulgePinchFilter","./filters/colorreplace/ColorReplaceFilter","./filters/glow/GlowFilter","./filters/hashedblur/HashedblurFilter","./filters/outline/OutlineFilter","./filters/radialblur/RadialblurFilter","./filters/radialblurmask/RadialblurMaskFilter","./filters/simplelightmap/SimpleLightmapFilter"],"mappings":"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","file":"pixi-extra-filters.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\r\n\r\n/**\r\n* @author Julien CLEREL @JuloxRox\r\n* original filter https://github.com/evanw/glfx.js/blob/master/src/filters/warp/bulgepinch.js by Evan Wallace : http://madebyevan.com/\r\n*/\r\n\r\n/**\r\n* @filter Bulge / Pinch\r\n* @description Bulges or pinches the image in a circle.\r\n* @param center The x and y coordinates of the center of the circle of effect.\r\n* @param radius The radius of the circle of effect.\r\n* @param strength -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\r\n*\r\n* @class BulgePinchFilter\r\n* @extends AbstractFilter\r\n* @constructor\r\n*/\r\n\r\nfunction BulgePinchFilter() {\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n       // vertex shader\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void){\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n            // fragment shader\r\n        \"#define GLSLIFY 1\\nuniform float radius;\\nuniform float strength;\\nuniform vec2 center;\\nuniform sampler2D uSampler;\\nuniform vec4 dimensions;\\nvarying vec2 vTextureCoord;\\nvoid main()\\n{\\n    vec2 coord = vTextureCoord * dimensions.xy;\\n    coord -= center;\\n    float distance = length(coord);\\n    if (distance < radius) {\\n        float percent = distance / radius;\\n        if (strength > 0.0) {\\n            coord *= mix(1.0, smoothstep(0.0, radius /     distance, percent), strength * 0.75);\\n        } else {\\n            coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);\\n        }\\n    }\\n    coord += center;\\n    gl_FragColor = texture2D(uSampler, coord / dimensions.xy);\\n    vec2 clampedCoord = clamp(coord, vec2(0.0), dimensions.xy);\\n    if (coord != clampedCoord) {\\n    gl_FragColor.a *= max(0.0, 1.0 - length(coord - clampedCoord));\\n    }\\n}\\n\"\r\n    );\r\n}\r\n\r\nBulgePinchFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nBulgePinchFilter.prototype.constructor = BulgePinchFilter;\r\nmodule.exports = BulgePinchFilter;\r\n\r\nObject.defineProperties(BulgePinchFilter.prototype, {\r\n    /**\r\n     * The radius of the circle of effect.\r\n     *\r\n     * @property radius\r\n     * @type Number\r\n     */\r\n    radius: {\r\n        get: function ()\r\n        {\r\n            return this.uniforms.radius;\r\n        },\r\n        set: function (value)\r\n        {\r\n            this.uniforms.radius = value;\r\n        }\r\n    },\r\n    /**\r\n     * The strength of the effect. -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\r\n     *\r\n     * @property strength\r\n     * @type Number\r\n     */\r\n    strength: {\r\n        get: function ()\r\n        {\r\n            return this.uniforms.strength;\r\n        },\r\n        set: function (value)\r\n        {\r\n            this.uniforms.strength = value;\r\n        }\r\n    },\r\n    /**\r\n     * The x and y coordinates of the center of the circle of effect.\r\n     *\r\n     * @property center\r\n     * @type Point\r\n     */\r\n    center: {\r\n        get: function ()\r\n        {\r\n            return this.uniforms.center;\r\n        },\r\n        set: function (value)\r\n        {\r\n            this.uniforms.center = value;\r\n        }\r\n    }\r\n});\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\r\n\r\n/**\r\n* @author Julien CLEREL @JuloxRox\r\n* original filter https://github.com/evanw/glfx.js/blob/master/src/filters/warp/bulgepinch.js by Evan Wallace : http://madebyevan.com/\r\n*/\r\n\r\n/**\r\n* @filter Bulge / Pinch\r\n* @description Bulges or pinches the image in a circle.\r\n* @param center The x and y coordinates of the center of the circle of effect.\r\n* @param radius The radius of the circle of effect.\r\n* @param strength -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\r\n*\r\n* @class BulgePinchFilter\r\n* @extends AbstractFilter\r\n* @constructor\r\n*/\r\n\r\nfunction BulgePinchFilter() {\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n       // vertex shader\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void){\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n            // fragment shader\r\n        \"#define GLSLIFY 1\\nuniform float radius;\\nuniform float strength;\\nuniform vec2 center;\\nuniform sampler2D uSampler;\\nuniform vec4 dimensions;\\nvarying vec2 vTextureCoord;\\nvoid main()\\n{\\n    vec2 coord = vTextureCoord * dimensions.xy;\\n    coord -= center;\\n    float distance = length(coord);\\n    if (distance < radius) {\\n        float percent = distance / radius;\\n        if (strength > 0.0) {\\n            coord *= mix(1.0, smoothstep(0.0, radius /     distance, percent), strength * 0.75);\\n        } else {\\n            coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);\\n        }\\n    }\\n    coord += center;\\n    gl_FragColor = texture2D(uSampler, coord / dimensions.xy);\\n    vec2 clampedCoord = clamp(coord, vec2(0.0), dimensions.xy);\\n    if (coord != clampedCoord) {\\n    gl_FragColor.a *= max(0.0, 1.0 - length(coord - clampedCoord));\\n    }\\n}\\n\"\r\n    );\r\n}\r\n\r\nBulgePinchFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nBulgePinchFilter.prototype.constructor = BulgePinchFilter;\r\nmodule.exports = BulgePinchFilter;\r\n\r\nObject.defineProperties(BulgePinchFilter.prototype, {\r\n    /**\r\n     * The radius of the circle of effect.\r\n     *\r\n     * @property radius\r\n     * @type Number\r\n     */\r\n    radius: {\r\n        get: function ()\r\n        {\r\n            return this.uniforms.radius;\r\n        },\r\n        set: function (value)\r\n        {\r\n            this.uniforms.radius = value;\r\n        }\r\n    },\r\n    /**\r\n     * The strength of the effect. -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\r\n     *\r\n     * @property strength\r\n     * @type Number\r\n     */\r\n    strength: {\r\n        get: function ()\r\n        {\r\n            return this.uniforms.strength;\r\n        },\r\n        set: function (value)\r\n        {\r\n            this.uniforms.strength = value;\r\n        }\r\n    },\r\n    /**\r\n     * The x and y coordinates of the center of the circle of effect.\r\n     *\r\n     * @property center\r\n     * @type Point\r\n     */\r\n    center: {\r\n        get: function ()\r\n        {\r\n            return this.uniforms.center;\r\n        },\r\n        set: function (value)\r\n        {\r\n            this.uniforms.center = value;\r\n        }\r\n    }\r\n});\r\n\n},{}],2:[function(require,module,exports){\n\r\n\r\n/**\r\n * ColorReplaceFilter, originally by mishaa, updated by timetocode\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n *\r\n * @class\r\n * @param originalColor {FloatArray32} The color that will be changed, as a 3 component RGB e.g. new Float32Array(1.0, 1.0, 1.0)\r\n * @param newColor {FloatArray32} The resulting color, as a 3 component RGB e.g. new Float32Array(1.0, 0.5, 1.0)\r\n * @param epsilon {float} Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\r\n *\r\n * @example\r\n *  // replaces true red with true blue\r\n *  someSprite.shader = new ColorReplaceFilter(\r\n *   new Float32Array([1, 0, 0]),\r\n *   new Float32Array([0, 0, 1]),\r\n *   0.001\r\n *  );\r\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\r\n *  someOtherSprite.shader = new ColorReplaceFilter(\r\n *   new Float32Array([220/255.0, 220/255.0, 220/255.0]),\r\n *   new Float32Array([225/255.0, 200/255.0, 215/255.0]),\r\n *   0.001\r\n *  );\r\n *\r\n */\r\nfunction ColorReplaceFilter(originalColor, newColor, epsilon) {\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n        // vertex shader\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void){\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        // fragment shader\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nuniform sampler2D texture;\\nuniform vec3 originalColor;\\nuniform vec3 newColor;\\nuniform float epsilon;\\nvoid main(void) {\\n    vec4 currentColor = texture2D(texture, vTextureCoord);\\n    vec3 colorDiff = originalColor - (currentColor.rgb / max(currentColor.a, 0.0000000001));\\n    float colorDistance = length(colorDiff);\\n    float doReplace = step(colorDistance, epsilon);\\n    gl_FragColor = vec4(mix(currentColor.rgb, (newColor + colorDiff) * currentColor.a, doReplace), currentColor.a);\\n}\\n\"\r\n    );\r\n\r\n    this.uniforms.originalColor = originalColor;\r\n    this.uniforms.newColor = newColor;\r\n    this.uniforms.epsilon = epsilon;\r\n};\r\n\r\nColorReplaceFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nColorReplaceFilter.prototype.constructor = ColorReplaceFilter;\r\nmodule.exports = ColorReplaceFilter;\r\n\r\nObject.defineProperty(ColorReplaceFilter.prototype, 'originalColor', {\r\n  set: function (value) {\r\n    var r = ((value & 0xFF0000) >> 16) / 255,\r\n        g = ((value & 0x00FF00) >> 8) / 255,\r\n        b = (value & 0x0000FF) / 255;\r\n    this.uniforms.originalColor = { x: r, y: g, z: b };\r\n  }\r\n});\r\n\r\nObject.defineProperty(ColorReplaceFilter.prototype, 'newColor', {\r\n  set: function (value) {\r\n    var r = ((value & 0xFF0000) >> 16) / 255,\r\n        g = ((value & 0x00FF00) >> 8) / 255,\r\n        b = (value & 0x0000FF) / 255;\r\n    this.uniforms.newColor = { x: r, y: g, z: b };\r\n  }\r\n});\r\n\r\nObject.defineProperty(ColorReplaceFilter.prototype, 'epsilon', {\r\n  set: function (value) {\r\n    this.uniforms.epsilon = value;\r\n  }\r\n});\r\n\n},{}],3:[function(require,module,exports){\n\r\n\r\n/**\r\n * GlowFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/12756-glow-filter/?hl=mishaa#entry73578\r\n * http://codepen.io/mishaa/pen/raKzrm\r\n *\r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param outerStrength {number} The strength of the glow outward from the edge of the sprite.\r\n * @param innerStrength {number} The strength of the glow inward from the edge of the sprite.\r\n * @param color {number} The color of the glow.\r\n * @param quality {number} A number between 0 and 1 that describes the quality of the glow.\r\n *\r\n * @example\r\n *  someSprite.filters = [\r\n *      new GlowFilter(renderer.width, renderer.height, 15, 2, 1, 0xFF0000, 0.5)\r\n *  ];\r\n */\r\nfunction GlowFilter(viewWidth, viewHeight, distance, outerStrength, innerStrength, color, quality) {\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n        // vertex shader\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void){\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        // fragment shader\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\n\\nuniform float distance;\\nuniform float outerStrength;\\nuniform float innerStrength;\\nuniform vec4 glowColor;\\nuniform float pixelWidth;\\nuniform float pixelHeight;\\nvec2 px = vec2(pixelWidth, pixelHeight);\\n\\nvoid main(void) {\\n    const float PI = 3.14159265358979323846264;\\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\\n    vec4 curColor;\\n    float totalAlpha = 0.0;\\n    float maxTotalAlpha = 0.0;\\n    float cosAngle;\\n    float sinAngle;\\n    for (float angle = 0.0; angle <= PI * 2.0; angle += ' + (1 / quality / distance).toFixed(7) + ') {\\n       cosAngle = cos(angle);\\n       sinAngle = sin(angle);\\n       for (float curDistance = 1.0; curDistance <= ' + distance.toFixed(7) + '; curDistance++) {\\n           curColor = texture2D(uSampler, vec2(vTextureCoord.x + cosAngle * curDistance * px.x, vTextureCoord.y + sinAngle * curDistance * px.y));\\n           totalAlpha += (distance - curDistance) * curColor.a;\\n           maxTotalAlpha += (distance - curDistance);\\n       }\\n    }\\n    maxTotalAlpha = max(maxTotalAlpha, 0.0001);\\n\\n    ownColor.a = max(ownColor.a, 0.0001);\\n    ownColor.rgb = ownColor.rgb / ownColor.a;\\n    float outerGlowAlpha = (totalAlpha / maxTotalAlpha)  * outerStrength * (1. - ownColor.a);\\n    float innerGlowAlpha = ((maxTotalAlpha - totalAlpha) / maxTotalAlpha) * innerStrength * ownColor.a;\\n    float resultAlpha = (ownColor.a + outerGlowAlpha);\\n    gl_FragColor = vec4(mix(mix(ownColor.rgb, glowColor.rgb, innerGlowAlpha / ownColor.a), glowColor.rgb, outerGlowAlpha / resultAlpha) * resultAlpha, resultAlpha);\\n}\\n\"\r\n    );\r\n\r\n    this.uniforms.distance = distance;\r\n    this.uniforms.glowColor = new Float32Array([0, 0, 0, 1]);\r\n\r\n    quality = Math.pow(quality, 1/3);\r\n    this.quality = quality;\r\n\r\n    this.uniforms.distance.value *= quality;\r\n\r\n    viewWidth *= quality;\r\n    viewHeight *= quality;\r\n\r\n    this.color = color;\r\n    this.outerStrength = outerStrength;\r\n    this.innerStrength = innerStrength;\r\n    this.viewWidth = viewWidth;\r\n    this.viewHeight = viewHeight;\r\n};\r\n\r\nGlowFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nGlowFilter.prototype.constructor = GlowFilter;\r\nmodule.exports = GlowFilter;\r\n\r\nObject.defineProperties(GlowFilter.prototype, {\r\n    color: {\r\n        get: function () {\r\n            return PIXI.utils.rgb2hex(this.uniforms.glowColor);\r\n        },\r\n        set: function(value) {\r\n            PIXI.utils.hex2rgb(value, this.uniforms.glowColor);\r\n        }\r\n    },\r\n\r\n    outerStrength: {\r\n        get: function () {\r\n            return this.uniforms.outerStrength;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.outerStrength = value;\r\n        }\r\n    },\r\n\r\n    innerStrength: {\r\n        get: function () {\r\n            return this.uniforms.innerStrength;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.innerStrength = value;\r\n        }\r\n    },\r\n\r\n    viewWidth: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelWidth;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelWidth = 1 / value;\r\n        }\r\n    },\r\n\r\n    viewHeight: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelHeight;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelHeight = 1 / value;\r\n        }\r\n    }\r\n});\r\n\n},{}],4:[function(require,module,exports){\n\n\n/**\n * OutlineFilter, originally by mishaa\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\n * http://codepen.io/mishaa/pen/emGNRB\n *\n * @class\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\n * @param thickness {number} The tickness of the outline.\n * @param color {number} The color of the glow.\n *\n * @example\n *  someSprite.shader = new OutlineFilter(renderer.width, renderer.height, 9, 0xFF0000);\n */\nfunction HashedblurFilter(iResolution, iMouse) {\n    PIXI.Filter.call(this,\n        // vertex shader\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 filterMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vFilterCoord;\\n\\nvoid main(void)\\n{\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\\n   vTextureCoord = aTextureCoord;\\n}\\n\",\n        // fragment shader\n        \"precision highp float;\\n#define GLSLIFY 1\\n\\n//Based on shader toy: https://www.shadertoy.com/view/XsfSDs by jcant0n\\n\\nuniform vec2 iResolution;\\nuniform sampler2D uSampler;\\nuniform vec2 iMouse;\\nuniform float blur;\\n\\nconst int nsamples = 30;\\n\\nvarying vec2 vTextureCoord;\\n// Hashed blur\\n// David Hoskins.\\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\\n\\n// Can go down to 10 or so, and still be usable, probably...\\n#define ITERATIONS 30\\n\\n// Set this to 0.0 to stop the pixel movement.\\n#define TIME iGlobalTime\\n\\n#define TAU  6.28318530718\\n\\n//-------------------------------------------------------------------------------------------\\n// Use last part of hash function to generate new random radius and angle...\\nvec2 Sample(inout vec2 r)\\n{\\n    r = fract(r * vec2(33.3983, 43.4427));\\n    return r-.5;\\n    //return sqrt(r.x+.001) * vec2(sin(r.y * TAU), cos(r.y * TAU))*.5; // <<=== circular sampling.\\n}\\n\\n//-------------------------------------------------------------------------------------------\\n#define HASHSCALE 443.8975\\nvec2 Hash22(vec2 p)\\n{\\n\\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE);\\n    p3 += dot(p3, p3.yzx+19.19);\\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\\n}\\n\\n//-------------------------------------------------------------------------------------------\\nvec3 Blur(vec2 uv, float radius)\\n{\\n\\tradius = radius * .04;\\n\\n    vec2 circle = vec2(radius) * vec2((iResolution.y / iResolution.x), 1.0);\\n\\n\\t// Remove the time reference to prevent random jittering if you don't like it.\\n\\tvec2 random = Hash22(uv);\\n\\n    // Do the blur here...\\n\\tvec3 acc = vec3(0.0);\\n\\tfor (int i = 0; i < ITERATIONS; i++)\\n    {\\n\\t\\tacc += texture2D(uSampler, uv + circle * Sample(random), radius*10.0).xyz;\\n    }\\n\\treturn acc / float(ITERATIONS);\\n}\\n\\nvoid main(void)\\n{\\n    vec2 uv = vTextureCoord.xy;\\n\\n        float radius = 1.0 * (blur);\\n//        if (iMouse.w >= 1.0)\\n//        {\\n//        \\tradius = iMouse.x*2.0/iResolution.x;\\n//        }\\n        radius = pow(radius, 2.0);\\n\\n//        if (mod(iGlobalTime, 15.0) < 10.0 || iMouse.w >= 1.0)\\n//        {\\n//    \\t\\tfragColor = vec4(Blur(uv * vec2(1.0, -1.0), radius), 1.0);\\n//        }else\\n//        {\\n//            fragColor = vec4(Blur(uv * vec2(1.0, -1.0), abs(sin(uv.y*.8+2.85))*4.0), 1.0);\\n//        }\\n\\n            \\t\\tgl_FragColor = vec4(Blur(uv, radius), 1.0);\\n\\n}\\n\\n\",\n        {\n            iResolution: { type: 'v2', value: { x: 1920, y: 1080 } },\n            iMouse: { type: 'v2', value: { x: 10, y: 10.8 } },\n            blur: {\n                type: 'f',\n                value: 0.01\n            }\n        }\n    );\n\n    this.iResolution = [1000, 556];\n    this.iMouse = [10, 10];\n    this.blur = 0.01;\n};\n\nHashedblurFilter.prototype = Object.create(PIXI.Filter.prototype);\nHashedblurFilter.prototype.constructor = HashedblurFilter;\nmodule.exports = HashedblurFilter;\n\nObject.defineProperties(HashedblurFilter.prototype, {\n    iMouse: {\n        get: function () {\n            return this.uniforms.iMouse;\n        },\n        set: function (value) {\n            this.uniforms.iMouse = value;\n        }\n    },\n\n    iResolution: {\n        get: function () {\n            return this.uniforms.iResolution;\n        },\n        set: function(value) {\n            this.uniforms.iResolution = value;\n        }\n    },\n\n    blur: {\n        get: function () {\n            return this.uniforms.blur;\n        },\n        set: function(value) {\n            this.uniforms.blur = value;\n        }\n    }\n});\n\n},{}],5:[function(require,module,exports){\n\r\n\r\n/**\r\n * OutlineFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n * http://codepen.io/mishaa/pen/emGNRB\r\n *\r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param thickness {number} The tickness of the outline.\r\n * @param color {number} The color of the glow.\r\n *\r\n * @example\r\n *  someSprite.shader = new OutlineFilter(renderer.width, renderer.height, 9, 0xFF0000);\r\n */\r\nfunction OutlineFilter(viewWidth, viewHeight, thickness, color) {\r\n    thickness = thickness || 1;\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n        // vertex shader\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void){\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        // fragment shader\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform float thickness;\\nuniform vec4 outlineColor;\\nuniform float pixelWidth;\\nuniform float pixelHeight;\\nvec2 px = vec2(pixelWidth, pixelHeight);\\n\\nvoid main(void) {\\n    const float PI = 3.14159265358979323846264;\\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\\n    vec4 curColor;\\n    float maxAlpha = 0.;\\n    for (float angle = 0.; angle < PI * 2.; angle += %THICKNESS% ) {\\n        curColor = texture2D(uSampler, vec2(vTextureCoord.x + thickness * px.x * cos(angle), vTextureCoord.y + thickness * px.y * sin(angle)));\\n        maxAlpha = max(maxAlpha, curColor.a);\\n    }\\n    float resultAlpha = max(maxAlpha, ownColor.a);\\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\\n}\\n\".replace(/%THICKNESS%/gi, (1.0 / thickness).toFixed(7))\r\n    );\r\n\r\n    this.uniforms.pixelWidth = 1 / (viewWidth || 1);\r\n    this.uniforms.pixelHeight = 1 / (viewHeight || 1);\r\n    this.uniforms.thickness = thickness;\r\n    this.uniforms.outlineColor = new Float32Array([0, 0, 0, 1]);\r\n    if (color) {\r\n        this.color = color;\r\n    }\r\n};\r\n\r\nOutlineFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nOutlineFilter.prototype.constructor = OutlineFilter;\r\nmodule.exports = OutlineFilter;\r\n\r\nObject.defineProperties(OutlineFilter.prototype, {\r\n    color: {\r\n        get: function () {\r\n            return PIXI.utils.rgb2hex(this.uniforms.outlineColor);\r\n        },\r\n        set: function (value) {\r\n            PIXI.utils.hex2rgb(value, this.uniforms.outlineColor);\r\n        }\r\n    },\r\n\r\n    viewWidth: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelWidth;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelWidth = 1 / value;\r\n        }\r\n    },\r\n\r\n    viewHeight: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelHeight;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelHeight = 1 / value;\r\n        }\r\n    }\r\n});\r\n\n},{}],6:[function(require,module,exports){\n\r\n\r\n/**\r\n * OutlineFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n * http://codepen.io/mishaa/pen/emGNRB\r\n *\r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param thickness {number} The tickness of the outline.\r\n * @param color {number} The color of the glow.\r\n *\r\n * @example\r\n *  someSprite.shader = new OutlineFilter(renderer.width, renderer.height, 9, 0xFF0000);\r\n */\r\nfunction RadialblurFilter() {\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n        // vertex shader\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 filterMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vFilterCoord;\\n\\nvoid main(void)\\n{\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\\n   vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        // fragment shader\r\n        \"precision highp float;\\n#define GLSLIFY 1\\n\\n//Based on shader toy: https://www.shadertoy.com/view/XsfSDs by jcant0n\\n\\nuniform vec2 iResolution;\\nuniform sampler2D uSampler;\\nuniform vec2 iMouse;\\nuniform float blur;\\nvarying vec2 vTextureCoord;\\n\\nconst int nsamples = 50;\\n\\nvoid main(void)\\n{\\n    vec2 center = iMouse.xy / iResolution.xy;\\n\\n    \\tfloat blurStart = 1.0;\\n        //float blurWidth = 0.1;\\n\\n    \\tvec2 uv = vTextureCoord.xy;\\n\\n        uv -= center;\\n        float precompute = blur * (1.0 / float(nsamples - 1));\\n\\n        vec4 color = vec4(0.0);\\n        for(int i = 0; i < nsamples; i++)\\n        {\\n            float scale = blurStart + (float(i)* precompute);\\n            color += texture2D(uSampler, uv * scale + center);\\n        }\\n\\n        color /= float(nsamples);\\n        gl_FragColor = color;\\n}\\n\",\r\n        {\r\n            iResolution: { type: 'v2', value: { x: 1920, y: 1080 } },\r\n            iMouse: { type: 'v2', value: { x: 10, y: 10.8 } },\r\n            blur: {\r\n                type: 'f',\r\n                value: 0.01\r\n            }\r\n        }\r\n    );\r\n\r\n    this.iResolution = [1000, 556];\r\n    this.iMouse = [10, 10];\r\n    this.blur = 0.01;\r\n};\r\n\r\nRadialblurFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nRadialblurFilter.prototype.constructor = RadialblurFilter;\r\nmodule.exports = RadialblurFilter;\r\n\r\nObject.defineProperties(RadialblurFilter.prototype, {\r\n    iMouse: {\r\n        get: function () {\r\n            return this.uniforms.iMouse;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.iMouse = value;\r\n        }\r\n    },\r\n\r\n    iResolution: {\r\n        get: function () {\r\n            return this.uniforms.iResolution;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.iResolution = value;\r\n        }\r\n    },\r\n\r\n    blur: {\r\n        get: function () {\r\n            return this.uniforms.blur;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.blur = value;\r\n        }\r\n    }\r\n});\r\n\n},{}],7:[function(require,module,exports){\n\r\n\r\n/**\r\n * OutlineFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n * http://codepen.io/mishaa/pen/emGNRB\r\n *\r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param thickness {number} The tickness of the outline.\r\n * @param color {number} The color of the glow.\r\n *\r\n * @example\r\n *  someSprite.shader = new OutlineFilter(renderer.width, renderer.height, 9, 0xFF0000);\r\n */\r\nfunction RadialblurMaskFilter(iResolution, iMouse) {\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n        // vertex shader\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 filterMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vFilterCoord;\\n\\nvoid main(void)\\n{\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\\n   vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        // fragment shader\r\n        \"precision highp float;\\n#define GLSLIFY 1\\n\\n//Based on shader toy: https://www.shadertoy.com/view/XsfSDs by jcant0n\\n\\nuniform vec2 iResolution;\\nuniform sampler2D uSampler;\\nuniform vec2 iMouse;\\nuniform float blur;\\n\\nconst int nsamples = 30;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    vec2 center = iMouse.xy / iResolution.xy;\\n    vec2 uv = vTextureCoord.xy;\\n//    vec2 center = iMouse - (uv / iResolution);\\n    vec4 color = vec4(0.0);\\n\\n    if(distance(uv, center) < 0.2)\\n        {\\n\\t        gl_FragColor = texture2D(uSampler, uv);\\n        }\\n    else\\n        {\\n         float blurStart = 1.0;\\n         float blurWidth = 0.02;\\n         float precompute = blur * (1.0 / float(nsamples - 1));\\n\\n         uv -= center;\\n         for(int i = 0; i < nsamples; i++)\\n         {\\n               float scale = blurStart + (float(i)* precompute);\\n               color += texture2D(uSampler, uv * scale + center);\\n         }\\n         color /= float(nsamples);\\n         gl_FragColor = color;\\n     }\\n}\\n\",\r\n        {\r\n            iResolution: { type: 'v2', value: { x: 1920, y: 1080 } },\r\n            iMouse: { type: 'v2', value: { x: 10, y: 10.8 } },\r\n            blur: {\r\n                type: 'f',\r\n                value: 0.01\r\n            }\r\n        }\r\n    );\r\n\r\n    this.iResolution = [1000, 556];\r\n    this.iMouse = [10, 10];\r\n    this.blur = 0.01;\r\n};\r\n\r\nRadialblurMaskFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nRadialblurMaskFilter.prototype.constructor = RadialblurMaskFilter;\r\nmodule.exports = RadialblurMaskFilter;\r\n\r\nObject.defineProperties(RadialblurMaskFilter.prototype, {\r\n    iMouse: {\r\n        get: function () {\r\n            return this.uniforms.iMouse;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.iMouse = value;\r\n        }\r\n    },\r\n\r\n    iResolution: {\r\n        get: function () {\r\n            return this.uniforms.iResolution;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.iResolution = value;\r\n        }\r\n    },\r\n\r\n    blur: {\r\n        get: function () {\r\n            return this.uniforms.blur;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.blur = value;\r\n        }\r\n    }\r\n});\r\n\n},{}],8:[function(require,module,exports){\n\r\n\r\n/**\r\n* SimpleLightmap, originally by Oza94\r\n* http://www.html5gamedevs.com/topic/20027-pixijs-simple-lightmapping/\r\n* http://codepen.io/Oza94/pen/EPoRxj\r\n*\r\n* @class\r\n* @param lightmapTexture {PIXI.Texture} a texture where your lightmap is rendered\r\n* @param ambientColor {Array} An RGBA array of the ambient color\r\n* @param [resolution] {Array} An array for X/Y resolution\r\n*\r\n* @example\r\n*  var lightmapTex = new PIXI.RenderTexture(renderer, 400, 300);\r\n*\r\n*  // ... render lightmap on lightmapTex\r\n*\r\n*  stageContainer.filters = [\r\n*    new SimpleLightmapFilter(lightmapTex, [0.3, 0.3, 0.7, 0.5], [1.0, 1.0])\r\n*  ];\r\n*/\r\nfunction SimpleLightmapFilter(lightmapTexture, ambientColor, resolution) {\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n        // vertex shader\r\n        \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform float thickness;\\nuniform vec4 outlineColor;\\nuniform float pixelWidth;\\nuniform float pixelHeight;\\nvec2 px = vec2(pixelWidth, pixelHeight);\\n\\nvoid main(void) {\\n    const float PI = 3.14159265358979323846264;\\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\\n    vec4 curColor;\\n    float maxAlpha = 0.;\\n    for (float angle = 0.; angle < PI * 2.; angle +=  + (1 / thickness).toFixed(7) + ) {\\n        curColor = texture2D(uSampler, vec2(vTextureCoord.x + thickness * px.x * cos(angle), vTextureCoord.y + thickness * px.y * sin(angle)));\\n        maxAlpha = max(maxAlpha, curColor.a);\\n    }\\n    float resultAlpha = max(maxAlpha, ownColor.a);\\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\\n}\\n\",\r\n        // fragment shader\r\n        \"#define GLSLIFY 1\\nvarying vec4 vColor;\\nvarying vec2 vTextureCoord;\\nuniform sampler2D u_texture; //diffuse map\\nuniform sampler2D u_lightmap;   //light map\\nuniform vec2 resolution; //resolution of screen\\nuniform vec4 ambientColor; //ambient RGB, alpha channel is intensity\\nvoid main() {\\n    vec4 diffuseColor = texture2D(u_texture, vTextureCoord);\\n    vec2 lighCoord = (gl_FragCoord.xy / resolution.xy);\\n    vec4 light = texture2D(u_lightmap, vTextureCoord);\\n    vec3 ambient = ambientColor.rgb * ambientColor.a;\\n    vec3 intensity = ambient + light.rgb;\\n    vec3 finalColor = diffuseColor.rgb * intensity;\\n    gl_FragColor = vColor * vec4(finalColor, diffuseColor.a);\\n}\\n\"\r\n    );\r\n    this.uniforms.u_lightmap = lightmapTexture;\r\n    this.uniforms.resolution = new Float32Array(resolution || [1.0, 1.0]);\r\n    this.uniforms.ambientColor =  new Float32Array(ambientColor);\r\n}\r\n\r\nSimpleLightmapFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nSimpleLightmapFilter.prototype.constructor = SimpleLightmapFilter;\r\n\r\nObject.defineProperties(SimpleLightmapFilter.prototype, {\r\n    texture: {\r\n        get: function () {\r\n            return this.uniforms.u_lightmap;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.u_lightmap = value;\r\n        }\r\n    },\r\n    color: {\r\n        get: function () {\r\n            return this.uniforms.ambientColor;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.ambientColor = new Float32Array(value);\r\n        }\r\n    },\r\n    resolution: {\r\n        get: function () {\r\n            return this.uniforms.resolution;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.resolution = new Float32Array(value);\r\n        }\r\n    }\r\n});\r\n\r\nmodule.exports = SimpleLightmapFilter;\r\n\n},{}],9:[function(require,module,exports){\nmodule.exports = {\n    GlowFilter: require('./filters/glow/GlowFilter'),\n    OutlineFilter: require('./filters/outline/OutlineFilter'),\n    BulgePinchFilter: require('./filters/bulgepinch/BulgePinchFilter'),\n    ColorReplaceFilter: require('./filters/colorreplace/ColorReplaceFilter'),\n    SimpleLightmapFilter:\n        require('./filters/simplelightmap/SimpleLightmapFilter'),\n    RadialBlur: require('./filters/radialblur/RadialblurFilter'),\n    RadialBlurMask: require('./filters/radialblurmask/RadialblurMaskFilter'),\n    HashedBlur: require('./filters/hashedblur/HashedblurFilter')\n};\n\nfor (var filter in module.exports) {\n    PIXI.filters[filter] = module.exports[filter];\n}\n\n},{\"./filters/bulgepinch/BulgePinchFilter\":1,\"./filters/colorreplace/ColorReplaceFilter\":2,\"./filters/glow/GlowFilter\":3,\"./filters/hashedblur/HashedblurFilter\":4,\"./filters/outline/OutlineFilter\":5,\"./filters/radialblur/RadialblurFilter\":6,\"./filters/radialblurmask/RadialblurMaskFilter\":7,\"./filters/simplelightmap/SimpleLightmapFilter\":8}]},{},[9])\n\n","\r\n\r\n/**\r\n * ColorReplaceFilter, originally by mishaa, updated by timetocode\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n *\r\n * @class\r\n * @param originalColor {FloatArray32} The color that will be changed, as a 3 component RGB e.g. new Float32Array(1.0, 1.0, 1.0)\r\n * @param newColor {FloatArray32} The resulting color, as a 3 component RGB e.g. new Float32Array(1.0, 0.5, 1.0)\r\n * @param epsilon {float} Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\r\n *\r\n * @example\r\n *  // replaces true red with true blue\r\n *  someSprite.shader = new ColorReplaceFilter(\r\n *   new Float32Array([1, 0, 0]),\r\n *   new Float32Array([0, 0, 1]),\r\n *   0.001\r\n *  );\r\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\r\n *  someOtherSprite.shader = new ColorReplaceFilter(\r\n *   new Float32Array([220/255.0, 220/255.0, 220/255.0]),\r\n *   new Float32Array([225/255.0, 200/255.0, 215/255.0]),\r\n *   0.001\r\n *  );\r\n *\r\n */\r\nfunction ColorReplaceFilter(originalColor, newColor, epsilon) {\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n        // vertex shader\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void){\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        // fragment shader\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nuniform sampler2D texture;\\nuniform vec3 originalColor;\\nuniform vec3 newColor;\\nuniform float epsilon;\\nvoid main(void) {\\n    vec4 currentColor = texture2D(texture, vTextureCoord);\\n    vec3 colorDiff = originalColor - (currentColor.rgb / max(currentColor.a, 0.0000000001));\\n    float colorDistance = length(colorDiff);\\n    float doReplace = step(colorDistance, epsilon);\\n    gl_FragColor = vec4(mix(currentColor.rgb, (newColor + colorDiff) * currentColor.a, doReplace), currentColor.a);\\n}\\n\"\r\n    );\r\n\r\n    this.uniforms.originalColor = originalColor;\r\n    this.uniforms.newColor = newColor;\r\n    this.uniforms.epsilon = epsilon;\r\n};\r\n\r\nColorReplaceFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nColorReplaceFilter.prototype.constructor = ColorReplaceFilter;\r\nmodule.exports = ColorReplaceFilter;\r\n\r\nObject.defineProperty(ColorReplaceFilter.prototype, 'originalColor', {\r\n  set: function (value) {\r\n    var r = ((value & 0xFF0000) >> 16) / 255,\r\n        g = ((value & 0x00FF00) >> 8) / 255,\r\n        b = (value & 0x0000FF) / 255;\r\n    this.uniforms.originalColor = { x: r, y: g, z: b };\r\n  }\r\n});\r\n\r\nObject.defineProperty(ColorReplaceFilter.prototype, 'newColor', {\r\n  set: function (value) {\r\n    var r = ((value & 0xFF0000) >> 16) / 255,\r\n        g = ((value & 0x00FF00) >> 8) / 255,\r\n        b = (value & 0x0000FF) / 255;\r\n    this.uniforms.newColor = { x: r, y: g, z: b };\r\n  }\r\n});\r\n\r\nObject.defineProperty(ColorReplaceFilter.prototype, 'epsilon', {\r\n  set: function (value) {\r\n    this.uniforms.epsilon = value;\r\n  }\r\n});\r\n","\r\n\r\n/**\r\n * GlowFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/12756-glow-filter/?hl=mishaa#entry73578\r\n * http://codepen.io/mishaa/pen/raKzrm\r\n *\r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param outerStrength {number} The strength of the glow outward from the edge of the sprite.\r\n * @param innerStrength {number} The strength of the glow inward from the edge of the sprite.\r\n * @param color {number} The color of the glow.\r\n * @param quality {number} A number between 0 and 1 that describes the quality of the glow.\r\n *\r\n * @example\r\n *  someSprite.filters = [\r\n *      new GlowFilter(renderer.width, renderer.height, 15, 2, 1, 0xFF0000, 0.5)\r\n *  ];\r\n */\r\nfunction GlowFilter(viewWidth, viewHeight, distance, outerStrength, innerStrength, color, quality) {\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n        // vertex shader\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void){\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        // fragment shader\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\n\\nuniform float distance;\\nuniform float outerStrength;\\nuniform float innerStrength;\\nuniform vec4 glowColor;\\nuniform float pixelWidth;\\nuniform float pixelHeight;\\nvec2 px = vec2(pixelWidth, pixelHeight);\\n\\nvoid main(void) {\\n    const float PI = 3.14159265358979323846264;\\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\\n    vec4 curColor;\\n    float totalAlpha = 0.0;\\n    float maxTotalAlpha = 0.0;\\n    float cosAngle;\\n    float sinAngle;\\n    for (float angle = 0.0; angle <= PI * 2.0; angle += ' + (1 / quality / distance).toFixed(7) + ') {\\n       cosAngle = cos(angle);\\n       sinAngle = sin(angle);\\n       for (float curDistance = 1.0; curDistance <= ' + distance.toFixed(7) + '; curDistance++) {\\n           curColor = texture2D(uSampler, vec2(vTextureCoord.x + cosAngle * curDistance * px.x, vTextureCoord.y + sinAngle * curDistance * px.y));\\n           totalAlpha += (distance - curDistance) * curColor.a;\\n           maxTotalAlpha += (distance - curDistance);\\n       }\\n    }\\n    maxTotalAlpha = max(maxTotalAlpha, 0.0001);\\n\\n    ownColor.a = max(ownColor.a, 0.0001);\\n    ownColor.rgb = ownColor.rgb / ownColor.a;\\n    float outerGlowAlpha = (totalAlpha / maxTotalAlpha)  * outerStrength * (1. - ownColor.a);\\n    float innerGlowAlpha = ((maxTotalAlpha - totalAlpha) / maxTotalAlpha) * innerStrength * ownColor.a;\\n    float resultAlpha = (ownColor.a + outerGlowAlpha);\\n    gl_FragColor = vec4(mix(mix(ownColor.rgb, glowColor.rgb, innerGlowAlpha / ownColor.a), glowColor.rgb, outerGlowAlpha / resultAlpha) * resultAlpha, resultAlpha);\\n}\\n\"\r\n    );\r\n\r\n    this.uniforms.distance = distance;\r\n    this.uniforms.glowColor = new Float32Array([0, 0, 0, 1]);\r\n\r\n    quality = Math.pow(quality, 1/3);\r\n    this.quality = quality;\r\n\r\n    this.uniforms.distance.value *= quality;\r\n\r\n    viewWidth *= quality;\r\n    viewHeight *= quality;\r\n\r\n    this.color = color;\r\n    this.outerStrength = outerStrength;\r\n    this.innerStrength = innerStrength;\r\n    this.viewWidth = viewWidth;\r\n    this.viewHeight = viewHeight;\r\n};\r\n\r\nGlowFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nGlowFilter.prototype.constructor = GlowFilter;\r\nmodule.exports = GlowFilter;\r\n\r\nObject.defineProperties(GlowFilter.prototype, {\r\n    color: {\r\n        get: function () {\r\n            return PIXI.utils.rgb2hex(this.uniforms.glowColor);\r\n        },\r\n        set: function(value) {\r\n            PIXI.utils.hex2rgb(value, this.uniforms.glowColor);\r\n        }\r\n    },\r\n\r\n    outerStrength: {\r\n        get: function () {\r\n            return this.uniforms.outerStrength;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.outerStrength = value;\r\n        }\r\n    },\r\n\r\n    innerStrength: {\r\n        get: function () {\r\n            return this.uniforms.innerStrength;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.innerStrength = value;\r\n        }\r\n    },\r\n\r\n    viewWidth: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelWidth;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelWidth = 1 / value;\r\n        }\r\n    },\r\n\r\n    viewHeight: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelHeight;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelHeight = 1 / value;\r\n        }\r\n    }\r\n});\r\n","\n\n/**\n * OutlineFilter, originally by mishaa\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\n * http://codepen.io/mishaa/pen/emGNRB\n *\n * @class\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\n * @param thickness {number} The tickness of the outline.\n * @param color {number} The color of the glow.\n *\n * @example\n *  someSprite.shader = new OutlineFilter(renderer.width, renderer.height, 9, 0xFF0000);\n */\nfunction HashedblurFilter(iResolution, iMouse) {\n    PIXI.Filter.call(this,\n        // vertex shader\n        // vertex shader\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 filterMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vFilterCoord;\\n\\nvoid main(void)\\n{\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\\n   vTextureCoord = aTextureCoord;\\n}\\n\",\n        // fragment shader\n        \"precision highp float;\\n#define GLSLIFY 1\\n\\n//Based on shader toy: https://www.shadertoy.com/view/XsfSDs by jcant0n\\n\\nuniform vec2 iResolution;\\nuniform sampler2D uSampler;\\nuniform vec2 iMouse;\\nuniform float blur;\\n\\nconst int nsamples = 30;\\n\\nvarying vec2 vTextureCoord;\\n// Hashed blur\\n// David Hoskins.\\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\\n\\n// Can go down to 10 or so, and still be usable, probably...\\n#define ITERATIONS 30\\n\\n// Set this to 0.0 to stop the pixel movement.\\n#define TIME iGlobalTime\\n\\n#define TAU  6.28318530718\\n\\n//-------------------------------------------------------------------------------------------\\n// Use last part of hash function to generate new random radius and angle...\\nvec2 Sample(inout vec2 r)\\n{\\n    r = fract(r * vec2(33.3983, 43.4427));\\n    return r-.5;\\n    //return sqrt(r.x+.001) * vec2(sin(r.y * TAU), cos(r.y * TAU))*.5; // <<=== circular sampling.\\n}\\n\\n//-------------------------------------------------------------------------------------------\\n#define HASHSCALE 443.8975\\nvec2 Hash22(vec2 p)\\n{\\n\\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE);\\n    p3 += dot(p3, p3.yzx+19.19);\\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\\n}\\n\\n//-------------------------------------------------------------------------------------------\\nvec3 Blur(vec2 uv, float radius)\\n{\\n\\tradius = radius * .04;\\n\\n    vec2 circle = vec2(radius) * vec2((iResolution.y / iResolution.x), 1.0);\\n\\n\\t// Remove the time reference to prevent random jittering if you don't like it.\\n\\tvec2 random = Hash22(uv);\\n\\n    // Do the blur here...\\n\\tvec3 acc = vec3(0.0);\\n\\tfor (int i = 0; i < ITERATIONS; i++)\\n    {\\n\\t\\tacc += texture2D(uSampler, uv + circle * Sample(random), radius*10.0).xyz;\\n    }\\n\\treturn acc / float(ITERATIONS);\\n}\\n\\nvoid main(void)\\n{\\n    vec2 uv = vTextureCoord.xy;\\n\\n        float radius = 1.0 * (blur);\\n//        if (iMouse.w >= 1.0)\\n//        {\\n//        \\tradius = iMouse.x*2.0/iResolution.x;\\n//        }\\n        radius = pow(radius, 2.0);\\n\\n//        if (mod(iGlobalTime, 15.0) < 10.0 || iMouse.w >= 1.0)\\n//        {\\n//    \\t\\tfragColor = vec4(Blur(uv * vec2(1.0, -1.0), radius), 1.0);\\n//        }else\\n//        {\\n//            fragColor = vec4(Blur(uv * vec2(1.0, -1.0), abs(sin(uv.y*.8+2.85))*4.0), 1.0);\\n//        }\\n\\n            \\t\\tgl_FragColor = vec4(Blur(uv, radius), 1.0);\\n\\n}\\n\\n\",\n        {\n            iResolution: { type: 'v2', value: { x: 1920, y: 1080 } },\n            iMouse: { type: 'v2', value: { x: 10, y: 10.8 } },\n            blur: {\n                type: 'f',\n                value: 0.01\n            }\n        }\n    );\n\n    this.iResolution = [1000, 556];\n    this.iMouse = [10, 10];\n    this.blur = 0.01;\n};\n\nHashedblurFilter.prototype = Object.create(PIXI.Filter.prototype);\nHashedblurFilter.prototype.constructor = HashedblurFilter;\nmodule.exports = HashedblurFilter;\n\nObject.defineProperties(HashedblurFilter.prototype, {\n    iMouse: {\n        get: function () {\n            return this.uniforms.iMouse;\n        },\n        set: function (value) {\n            this.uniforms.iMouse = value;\n        }\n    },\n\n    iResolution: {\n        get: function () {\n            return this.uniforms.iResolution;\n        },\n        set: function(value) {\n            this.uniforms.iResolution = value;\n        }\n    },\n\n    blur: {\n        get: function () {\n            return this.uniforms.blur;\n        },\n        set: function(value) {\n            this.uniforms.blur = value;\n        }\n    }\n});\n","\r\n\r\n/**\r\n * OutlineFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n * http://codepen.io/mishaa/pen/emGNRB\r\n *\r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param thickness {number} The tickness of the outline.\r\n * @param color {number} The color of the glow.\r\n *\r\n * @example\r\n *  someSprite.shader = new OutlineFilter(renderer.width, renderer.height, 9, 0xFF0000);\r\n */\r\nfunction OutlineFilter(viewWidth, viewHeight, thickness, color) {\r\n    thickness = thickness || 1;\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n        // vertex shader\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void){\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        // fragment shader\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform float thickness;\\nuniform vec4 outlineColor;\\nuniform float pixelWidth;\\nuniform float pixelHeight;\\nvec2 px = vec2(pixelWidth, pixelHeight);\\n\\nvoid main(void) {\\n    const float PI = 3.14159265358979323846264;\\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\\n    vec4 curColor;\\n    float maxAlpha = 0.;\\n    for (float angle = 0.; angle < PI * 2.; angle += %THICKNESS% ) {\\n        curColor = texture2D(uSampler, vec2(vTextureCoord.x + thickness * px.x * cos(angle), vTextureCoord.y + thickness * px.y * sin(angle)));\\n        maxAlpha = max(maxAlpha, curColor.a);\\n    }\\n    float resultAlpha = max(maxAlpha, ownColor.a);\\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\\n}\\n\".replace(/%THICKNESS%/gi, (1.0 / thickness).toFixed(7))\r\n    );\r\n\r\n    this.uniforms.pixelWidth = 1 / (viewWidth || 1);\r\n    this.uniforms.pixelHeight = 1 / (viewHeight || 1);\r\n    this.uniforms.thickness = thickness;\r\n    this.uniforms.outlineColor = new Float32Array([0, 0, 0, 1]);\r\n    if (color) {\r\n        this.color = color;\r\n    }\r\n};\r\n\r\nOutlineFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nOutlineFilter.prototype.constructor = OutlineFilter;\r\nmodule.exports = OutlineFilter;\r\n\r\nObject.defineProperties(OutlineFilter.prototype, {\r\n    color: {\r\n        get: function () {\r\n            return PIXI.utils.rgb2hex(this.uniforms.outlineColor);\r\n        },\r\n        set: function (value) {\r\n            PIXI.utils.hex2rgb(value, this.uniforms.outlineColor);\r\n        }\r\n    },\r\n\r\n    viewWidth: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelWidth;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelWidth = 1 / value;\r\n        }\r\n    },\r\n\r\n    viewHeight: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelHeight;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelHeight = 1 / value;\r\n        }\r\n    }\r\n});\r\n","\r\n\r\n/**\r\n * OutlineFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n * http://codepen.io/mishaa/pen/emGNRB\r\n *\r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param thickness {number} The tickness of the outline.\r\n * @param color {number} The color of the glow.\r\n *\r\n * @example\r\n *  someSprite.shader = new OutlineFilter(renderer.width, renderer.height, 9, 0xFF0000);\r\n */\r\nfunction RadialblurFilter() {\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n        // vertex shader\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 filterMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vFilterCoord;\\n\\nvoid main(void)\\n{\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\\n   vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        // fragment shader\r\n        \"precision highp float;\\n#define GLSLIFY 1\\n\\n//Based on shader toy: https://www.shadertoy.com/view/XsfSDs by jcant0n\\n\\nuniform vec2 iResolution;\\nuniform sampler2D uSampler;\\nuniform vec2 iMouse;\\nuniform float blur;\\nvarying vec2 vTextureCoord;\\n\\nconst int nsamples = 50;\\n\\nvoid main(void)\\n{\\n    vec2 center = iMouse.xy / iResolution.xy;\\n\\n    \\tfloat blurStart = 1.0;\\n        //float blurWidth = 0.1;\\n\\n    \\tvec2 uv = vTextureCoord.xy;\\n\\n        uv -= center;\\n        float precompute = blur * (1.0 / float(nsamples - 1));\\n\\n        vec4 color = vec4(0.0);\\n        for(int i = 0; i < nsamples; i++)\\n        {\\n            float scale = blurStart + (float(i)* precompute);\\n            color += texture2D(uSampler, uv * scale + center);\\n        }\\n\\n        color /= float(nsamples);\\n        gl_FragColor = color;\\n}\\n\",\r\n        {\r\n            iResolution: { type: 'v2', value: { x: 1920, y: 1080 } },\r\n            iMouse: { type: 'v2', value: { x: 10, y: 10.8 } },\r\n            blur: {\r\n                type: 'f',\r\n                value: 0.01\r\n            }\r\n        }\r\n    );\r\n\r\n    this.iResolution = [1000, 556];\r\n    this.iMouse = [10, 10];\r\n    this.blur = 0.01;\r\n};\r\n\r\nRadialblurFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nRadialblurFilter.prototype.constructor = RadialblurFilter;\r\nmodule.exports = RadialblurFilter;\r\n\r\nObject.defineProperties(RadialblurFilter.prototype, {\r\n    iMouse: {\r\n        get: function () {\r\n            return this.uniforms.iMouse;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.iMouse = value;\r\n        }\r\n    },\r\n\r\n    iResolution: {\r\n        get: function () {\r\n            return this.uniforms.iResolution;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.iResolution = value;\r\n        }\r\n    },\r\n\r\n    blur: {\r\n        get: function () {\r\n            return this.uniforms.blur;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.blur = value;\r\n        }\r\n    }\r\n});\r\n","\r\n\r\n/**\r\n * OutlineFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n * http://codepen.io/mishaa/pen/emGNRB\r\n *\r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param thickness {number} The tickness of the outline.\r\n * @param color {number} The color of the glow.\r\n *\r\n * @example\r\n *  someSprite.shader = new OutlineFilter(renderer.width, renderer.height, 9, 0xFF0000);\r\n */\r\nfunction RadialblurMaskFilter(iResolution, iMouse) {\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n        // vertex shader\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 filterMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vFilterCoord;\\n\\nvoid main(void)\\n{\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\\n   vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        // fragment shader\r\n        \"precision highp float;\\n#define GLSLIFY 1\\n\\n//Based on shader toy: https://www.shadertoy.com/view/XsfSDs by jcant0n\\n\\nuniform vec2 iResolution;\\nuniform sampler2D uSampler;\\nuniform vec2 iMouse;\\nuniform float blur;\\n\\nconst int nsamples = 30;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    vec2 center = iMouse.xy / iResolution.xy;\\n    vec2 uv = vTextureCoord.xy;\\n//    vec2 center = iMouse - (uv / iResolution);\\n    vec4 color = vec4(0.0);\\n\\n    if(distance(uv, center) < 0.2)\\n        {\\n\\t        gl_FragColor = texture2D(uSampler, uv);\\n        }\\n    else\\n        {\\n         float blurStart = 1.0;\\n         float blurWidth = 0.02;\\n         float precompute = blur * (1.0 / float(nsamples - 1));\\n\\n         uv -= center;\\n         for(int i = 0; i < nsamples; i++)\\n         {\\n               float scale = blurStart + (float(i)* precompute);\\n               color += texture2D(uSampler, uv * scale + center);\\n         }\\n         color /= float(nsamples);\\n         gl_FragColor = color;\\n     }\\n}\\n\",\r\n        {\r\n            iResolution: { type: 'v2', value: { x: 1920, y: 1080 } },\r\n            iMouse: { type: 'v2', value: { x: 10, y: 10.8 } },\r\n            blur: {\r\n                type: 'f',\r\n                value: 0.01\r\n            }\r\n        }\r\n    );\r\n\r\n    this.iResolution = [1000, 556];\r\n    this.iMouse = [10, 10];\r\n    this.blur = 0.01;\r\n};\r\n\r\nRadialblurMaskFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nRadialblurMaskFilter.prototype.constructor = RadialblurMaskFilter;\r\nmodule.exports = RadialblurMaskFilter;\r\n\r\nObject.defineProperties(RadialblurMaskFilter.prototype, {\r\n    iMouse: {\r\n        get: function () {\r\n            return this.uniforms.iMouse;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.iMouse = value;\r\n        }\r\n    },\r\n\r\n    iResolution: {\r\n        get: function () {\r\n            return this.uniforms.iResolution;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.iResolution = value;\r\n        }\r\n    },\r\n\r\n    blur: {\r\n        get: function () {\r\n            return this.uniforms.blur;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.blur = value;\r\n        }\r\n    }\r\n});\r\n","\r\n\r\n/**\r\n* SimpleLightmap, originally by Oza94\r\n* http://www.html5gamedevs.com/topic/20027-pixijs-simple-lightmapping/\r\n* http://codepen.io/Oza94/pen/EPoRxj\r\n*\r\n* @class\r\n* @param lightmapTexture {PIXI.Texture} a texture where your lightmap is rendered\r\n* @param ambientColor {Array} An RGBA array of the ambient color\r\n* @param [resolution] {Array} An array for X/Y resolution\r\n*\r\n* @example\r\n*  var lightmapTex = new PIXI.RenderTexture(renderer, 400, 300);\r\n*\r\n*  // ... render lightmap on lightmapTex\r\n*\r\n*  stageContainer.filters = [\r\n*    new SimpleLightmapFilter(lightmapTex, [0.3, 0.3, 0.7, 0.5], [1.0, 1.0])\r\n*  ];\r\n*/\r\nfunction SimpleLightmapFilter(lightmapTexture, ambientColor, resolution) {\r\n    PIXI.Filter.call(this,\r\n        // vertex shader\r\n        // vertex shader\r\n        \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform float thickness;\\nuniform vec4 outlineColor;\\nuniform float pixelWidth;\\nuniform float pixelHeight;\\nvec2 px = vec2(pixelWidth, pixelHeight);\\n\\nvoid main(void) {\\n    const float PI = 3.14159265358979323846264;\\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\\n    vec4 curColor;\\n    float maxAlpha = 0.;\\n    for (float angle = 0.; angle < PI * 2.; angle +=  + (1 / thickness).toFixed(7) + ) {\\n        curColor = texture2D(uSampler, vec2(vTextureCoord.x + thickness * px.x * cos(angle), vTextureCoord.y + thickness * px.y * sin(angle)));\\n        maxAlpha = max(maxAlpha, curColor.a);\\n    }\\n    float resultAlpha = max(maxAlpha, ownColor.a);\\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\\n}\\n\",\r\n        // fragment shader\r\n        \"#define GLSLIFY 1\\nvarying vec4 vColor;\\nvarying vec2 vTextureCoord;\\nuniform sampler2D u_texture; //diffuse map\\nuniform sampler2D u_lightmap;   //light map\\nuniform vec2 resolution; //resolution of screen\\nuniform vec4 ambientColor; //ambient RGB, alpha channel is intensity\\nvoid main() {\\n    vec4 diffuseColor = texture2D(u_texture, vTextureCoord);\\n    vec2 lighCoord = (gl_FragCoord.xy / resolution.xy);\\n    vec4 light = texture2D(u_lightmap, vTextureCoord);\\n    vec3 ambient = ambientColor.rgb * ambientColor.a;\\n    vec3 intensity = ambient + light.rgb;\\n    vec3 finalColor = diffuseColor.rgb * intensity;\\n    gl_FragColor = vColor * vec4(finalColor, diffuseColor.a);\\n}\\n\"\r\n    );\r\n    this.uniforms.u_lightmap = lightmapTexture;\r\n    this.uniforms.resolution = new Float32Array(resolution || [1.0, 1.0]);\r\n    this.uniforms.ambientColor =  new Float32Array(ambientColor);\r\n}\r\n\r\nSimpleLightmapFilter.prototype = Object.create(PIXI.Filter.prototype);\r\nSimpleLightmapFilter.prototype.constructor = SimpleLightmapFilter;\r\n\r\nObject.defineProperties(SimpleLightmapFilter.prototype, {\r\n    texture: {\r\n        get: function () {\r\n            return this.uniforms.u_lightmap;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.u_lightmap = value;\r\n        }\r\n    },\r\n    color: {\r\n        get: function () {\r\n            return this.uniforms.ambientColor;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.ambientColor = new Float32Array(value);\r\n        }\r\n    },\r\n    resolution: {\r\n        get: function () {\r\n            return this.uniforms.resolution;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.resolution = new Float32Array(value);\r\n        }\r\n    }\r\n});\r\n\r\nmodule.exports = SimpleLightmapFilter;\r\n","module.exports = {\n    GlowFilter: require('./filters/glow/GlowFilter'),\n    OutlineFilter: require('./filters/outline/OutlineFilter'),\n    BulgePinchFilter: require('./filters/bulgepinch/BulgePinchFilter'),\n    ColorReplaceFilter: require('./filters/colorreplace/ColorReplaceFilter'),\n    SimpleLightmapFilter:\n        require('./filters/simplelightmap/SimpleLightmapFilter'),\n    RadialBlur: require('./filters/radialblur/RadialblurFilter'),\n    RadialBlurMask: require('./filters/radialblurmask/RadialblurMaskFilter'),\n    HashedBlur: require('./filters/hashedblur/HashedblurFilter')\n};\n\nfor (var filter in module.exports) {\n    PIXI.filters[filter] = module.exports[filter];\n}\n"],"sourceRoot":"./"}