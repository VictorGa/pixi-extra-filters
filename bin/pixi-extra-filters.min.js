!function e(n,o,t){function r(l,u){if(!o[l]){if(!n[l]){var a="function"==typeof require&&require;if(!u&&a)return a(l,!0);if(i)return i(l,!0);var s=new Error("Cannot find module '"+l+"'");throw s.code="MODULE_NOT_FOUND",s}var c=o[l]={exports:{}};n[l][0].call(c.exports,function(e){var o=n[l][1][e];return r(o?o:e)},c,c.exports,e,n,o,t)}return o[l].exports}for(var i="function"==typeof require&&require,l=0;l<t.length;l++)r(t[l]);return r}({1:[function(e,n,o){function t(){PIXI.Filter.call(this,"#define GLSLIFY 1\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}\n","#define GLSLIFY 1\nuniform float radius;\nuniform float strength;\nuniform vec2 center;\nuniform sampler2D uSampler;\nuniform vec4 dimensions;\nvarying vec2 vTextureCoord;\nvoid main()\n{\n    vec2 coord = vTextureCoord * dimensions.xy;\n    coord -= center;\n    float distance = length(coord);\n    if (distance < radius) {\n        float percent = distance / radius;\n        if (strength > 0.0) {\n            coord *= mix(1.0, smoothstep(0.0, radius /     distance, percent), strength * 0.75);\n        } else {\n            coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);\n        }\n    }\n    coord += center;\n    gl_FragColor = texture2D(uSampler, coord / dimensions.xy);\n    vec2 clampedCoord = clamp(coord, vec2(0.0), dimensions.xy);\n    if (coord != clampedCoord) {\n    gl_FragColor.a *= max(0.0, 1.0 - length(coord - clampedCoord));\n    }\n}\n")}t.prototype=Object.create(PIXI.Filter.prototype),t.prototype.constructor=t,n.exports=t,Object.defineProperties(t.prototype,{radius:{get:function(){return this.uniforms.radius},set:function(e){this.uniforms.radius=e}},strength:{get:function(){return this.uniforms.strength},set:function(e){this.uniforms.strength=e}},center:{get:function(){return this.uniforms.center},set:function(e){this.uniforms.center=e}}})},{}],2:[function(e,n,o){function t(e,n,o){PIXI.Filter.call(this,"#define GLSLIFY 1\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}\n","#define GLSLIFY 1\nvarying vec2 vTextureCoord;\nuniform sampler2D texture;\nuniform vec3 originalColor;\nuniform vec3 newColor;\nuniform float epsilon;\nvoid main(void) {\n    vec4 currentColor = texture2D(texture, vTextureCoord);\n    vec3 colorDiff = originalColor - (currentColor.rgb / max(currentColor.a, 0.0000000001));\n    float colorDistance = length(colorDiff);\n    float doReplace = step(colorDistance, epsilon);\n    gl_FragColor = vec4(mix(currentColor.rgb, (newColor + colorDiff) * currentColor.a, doReplace), currentColor.a);\n}\n"),this.uniforms.originalColor=e,this.uniforms.newColor=n,this.uniforms.epsilon=o}t.prototype=Object.create(PIXI.Filter.prototype),t.prototype.constructor=t,n.exports=t,Object.defineProperty(t.prototype,"originalColor",{set:function(e){var n=((16711680&e)>>16)/255,o=((65280&e)>>8)/255,t=(255&e)/255;this.uniforms.originalColor={x:n,y:o,z:t}}}),Object.defineProperty(t.prototype,"newColor",{set:function(e){var n=((16711680&e)>>16)/255,o=((65280&e)>>8)/255,t=(255&e)/255;this.uniforms.newColor={x:n,y:o,z:t}}}),Object.defineProperty(t.prototype,"epsilon",{set:function(e){this.uniforms.epsilon=e}})},{}],3:[function(e,n,o){function t(e,n,o,t,r,i,l){PIXI.Filter.call(this,"#define GLSLIFY 1\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}\n","#define GLSLIFY 1\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\n\nuniform sampler2D uSampler;\n\nuniform float distance;\nuniform float outerStrength;\nuniform float innerStrength;\nuniform vec4 glowColor;\nuniform float pixelWidth;\nuniform float pixelHeight;\nvec2 px = vec2(pixelWidth, pixelHeight);\n\nvoid main(void) {\n    const float PI = 3.14159265358979323846264;\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\n    vec4 curColor;\n    float totalAlpha = 0.0;\n    float maxTotalAlpha = 0.0;\n    float cosAngle;\n    float sinAngle;\n    for (float angle = 0.0; angle <= PI * 2.0; angle += ' + (1 / quality / distance).toFixed(7) + ') {\n       cosAngle = cos(angle);\n       sinAngle = sin(angle);\n       for (float curDistance = 1.0; curDistance <= ' + distance.toFixed(7) + '; curDistance++) {\n           curColor = texture2D(uSampler, vec2(vTextureCoord.x + cosAngle * curDistance * px.x, vTextureCoord.y + sinAngle * curDistance * px.y));\n           totalAlpha += (distance - curDistance) * curColor.a;\n           maxTotalAlpha += (distance - curDistance);\n       }\n    }\n    maxTotalAlpha = max(maxTotalAlpha, 0.0001);\n\n    ownColor.a = max(ownColor.a, 0.0001);\n    ownColor.rgb = ownColor.rgb / ownColor.a;\n    float outerGlowAlpha = (totalAlpha / maxTotalAlpha)  * outerStrength * (1. - ownColor.a);\n    float innerGlowAlpha = ((maxTotalAlpha - totalAlpha) / maxTotalAlpha) * innerStrength * ownColor.a;\n    float resultAlpha = (ownColor.a + outerGlowAlpha);\n    gl_FragColor = vec4(mix(mix(ownColor.rgb, glowColor.rgb, innerGlowAlpha / ownColor.a), glowColor.rgb, outerGlowAlpha / resultAlpha) * resultAlpha, resultAlpha);\n}\n"),this.uniforms.distance=o,this.uniforms.glowColor=new Float32Array([0,0,0,1]),l=Math.pow(l,1/3),this.quality=l,this.uniforms.distance.value*=l,e*=l,n*=l,this.color=i,this.outerStrength=t,this.innerStrength=r,this.viewWidth=e,this.viewHeight=n}t.prototype=Object.create(PIXI.Filter.prototype),t.prototype.constructor=t,n.exports=t,Object.defineProperties(t.prototype,{color:{get:function(){return PIXI.utils.rgb2hex(this.uniforms.glowColor)},set:function(e){PIXI.utils.hex2rgb(e,this.uniforms.glowColor)}},outerStrength:{get:function(){return this.uniforms.outerStrength},set:function(e){this.uniforms.outerStrength=e}},innerStrength:{get:function(){return this.uniforms.innerStrength},set:function(e){this.uniforms.innerStrength=e}},viewWidth:{get:function(){return 1/this.uniforms.pixelWidth},set:function(e){this.uniforms.pixelWidth=1/e}},viewHeight:{get:function(){return 1/this.uniforms.pixelHeight},set:function(e){this.uniforms.pixelHeight=1/e}}})},{}],4:[function(e,n,o){function t(e,n){PIXI.Filter.call(this,"#define GLSLIFY 1\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 filterMatrix;\n\nvarying vec2 vTextureCoord;\nvarying vec2 vFilterCoord;\n\nvoid main(void)\n{\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\n   vTextureCoord = aTextureCoord;\n}\n","precision highp float;\n#define GLSLIFY 1\n\n//Based on shader toy: https://www.shadertoy.com/view/XsfSDs by jcant0n\n\nuniform vec2 iResolution;\nuniform sampler2D uSampler;\nuniform vec2 iMouse;\nuniform float blur;\n\nconst int nsamples = 30;\n\nvarying vec2 vTextureCoord;\n// Hashed blur\n// David Hoskins.\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Can go down to 10 or so, and still be usable, probably...\n#define ITERATIONS 30\n\n// Set this to 0.0 to stop the pixel movement.\n#define TIME iGlobalTime\n\n#define TAU  6.28318530718\n\n//-------------------------------------------------------------------------------------------\n// Use last part of hash function to generate new random radius and angle...\nvec2 Sample(inout vec2 r)\n{\n    r = fract(r * vec2(33.3983, 43.4427));\n    return r-.5;\n    //return sqrt(r.x+.001) * vec2(sin(r.y * TAU), cos(r.y * TAU))*.5; // <<=== circular sampling.\n}\n\n//-------------------------------------------------------------------------------------------\n#define HASHSCALE 443.8975\nvec2 Hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n//-------------------------------------------------------------------------------------------\nvec3 Blur(vec2 uv, float radius)\n{\n\tradius = radius * .04;\n\n    vec2 circle = vec2(radius) * vec2((iResolution.y / iResolution.x), 1.0);\n\n\t// Remove the time reference to prevent random jittering if you don't like it.\n\tvec2 random = Hash22(uv);\n\n    // Do the blur here...\n\tvec3 acc = vec3(0.0);\n\tfor (int i = 0; i < ITERATIONS; i++)\n    {\n\t\tacc += texture2D(uSampler, uv + circle * Sample(random), radius*10.0).xyz;\n    }\n\treturn acc / float(ITERATIONS);\n}\n\nvoid main(void)\n{\n    vec2 uv = vTextureCoord.xy;\n\n        float radius = 1.0 * (blur);\n//        if (iMouse.w >= 1.0)\n//        {\n//        \tradius = iMouse.x*2.0/iResolution.x;\n//        }\n        radius = pow(radius, 2.0);\n\n//        if (mod(iGlobalTime, 15.0) < 10.0 || iMouse.w >= 1.0)\n//        {\n//    \t\tfragColor = vec4(Blur(uv * vec2(1.0, -1.0), radius), 1.0);\n//        }else\n//        {\n//            fragColor = vec4(Blur(uv * vec2(1.0, -1.0), abs(sin(uv.y*.8+2.85))*4.0), 1.0);\n//        }\n\n            \t\tgl_FragColor = vec4(Blur(uv, radius), 1.0);\n\n}\n\n",{iResolution:{type:"v2",value:{x:1920,y:1080}},iMouse:{type:"v2",value:{x:10,y:10.8}},blur:{type:"f",value:.01}}),this.iResolution=[1e3,556],this.iMouse=[10,10],this.blur=.01}t.prototype=Object.create(PIXI.Filter.prototype),t.prototype.constructor=t,n.exports=t,Object.defineProperties(t.prototype,{iMouse:{get:function(){return this.uniforms.iMouse},set:function(e){this.uniforms.iMouse=e}},iResolution:{get:function(){return this.uniforms.iResolution},set:function(e){this.uniforms.iResolution=e}},blur:{get:function(){return this.uniforms.blur},set:function(e){this.uniforms.blur=e}}})},{}],5:[function(e,n,o){function t(e,n,o,t){o=o||1,PIXI.Filter.call(this,"#define GLSLIFY 1\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}\n","#define GLSLIFY 1\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform float thickness;\nuniform vec4 outlineColor;\nuniform float pixelWidth;\nuniform float pixelHeight;\nvec2 px = vec2(pixelWidth, pixelHeight);\n\nvoid main(void) {\n    const float PI = 3.14159265358979323846264;\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\n    vec4 curColor;\n    float maxAlpha = 0.;\n    for (float angle = 0.; angle < PI * 2.; angle += %THICKNESS% ) {\n        curColor = texture2D(uSampler, vec2(vTextureCoord.x + thickness * px.x * cos(angle), vTextureCoord.y + thickness * px.y * sin(angle)));\n        maxAlpha = max(maxAlpha, curColor.a);\n    }\n    float resultAlpha = max(maxAlpha, ownColor.a);\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\n}\n".replace(/%THICKNESS%/gi,(1/o).toFixed(7))),this.uniforms.pixelWidth=1/(e||1),this.uniforms.pixelHeight=1/(n||1),this.uniforms.thickness=o,this.uniforms.outlineColor=new Float32Array([0,0,0,1]),t&&(this.color=t)}t.prototype=Object.create(PIXI.Filter.prototype),t.prototype.constructor=t,n.exports=t,Object.defineProperties(t.prototype,{color:{get:function(){return PIXI.utils.rgb2hex(this.uniforms.outlineColor)},set:function(e){PIXI.utils.hex2rgb(e,this.uniforms.outlineColor)}},viewWidth:{get:function(){return 1/this.uniforms.pixelWidth},set:function(e){this.uniforms.pixelWidth=1/e}},viewHeight:{get:function(){return 1/this.uniforms.pixelHeight},set:function(e){this.uniforms.pixelHeight=1/e}}})},{}],6:[function(e,n,o){function t(){PIXI.Filter.call(this,"#define GLSLIFY 1\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 filterMatrix;\n\nvarying vec2 vTextureCoord;\nvarying vec2 vFilterCoord;\n\nvoid main(void)\n{\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\n   vTextureCoord = aTextureCoord;\n}\n","precision highp float;\n#define GLSLIFY 1\n\n//Based on shader toy: https://www.shadertoy.com/view/XsfSDs by jcant0n\n\nuniform vec2 iResolution;\nuniform sampler2D uSampler;\nuniform vec2 iMouse;\nuniform float blur;\nvarying vec2 vTextureCoord;\n\nconst int nsamples = 50;\n\nvoid main(void)\n{\n    vec2 center = iMouse.xy / iResolution.xy;\n\n    \tfloat blurStart = 1.0;\n        //float blurWidth = 0.1;\n\n    \tvec2 uv = vTextureCoord.xy;\n\n        uv -= center;\n        float precompute = blur * (1.0 / float(nsamples - 1));\n\n        vec4 color = vec4(0.0);\n        for(int i = 0; i < nsamples; i++)\n        {\n            float scale = blurStart + (float(i)* precompute);\n            color += texture2D(uSampler, uv * scale + center);\n        }\n\n        color /= float(nsamples);\n        gl_FragColor = color;\n}\n",{iResolution:{type:"v2",value:{x:1920,y:1080}},iMouse:{type:"v2",value:{x:10,y:10.8}},blur:{type:"f",value:.01}}),this.iResolution=[1e3,556],this.iMouse=[10,10],this.blur=.01}t.prototype=Object.create(PIXI.Filter.prototype),t.prototype.constructor=t,n.exports=t,Object.defineProperties(t.prototype,{iMouse:{get:function(){return this.uniforms.iMouse},set:function(e){this.uniforms.iMouse=e}},iResolution:{get:function(){return this.uniforms.iResolution},set:function(e){this.uniforms.iResolution=e}},blur:{get:function(){return this.uniforms.blur},set:function(e){this.uniforms.blur=e}}})},{}],7:[function(e,n,o){function t(e,n){PIXI.Filter.call(this,"#define GLSLIFY 1\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 filterMatrix;\n\nvarying vec2 vTextureCoord;\nvarying vec2 vFilterCoord;\n\nvoid main(void)\n{\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vFilterCoord = ( filterMatrix * vec3( aTextureCoord, 1.0)  ).xy;\n   vTextureCoord = aTextureCoord;\n}\n","precision highp float;\n#define GLSLIFY 1\n\n//Based on shader toy: https://www.shadertoy.com/view/XsfSDs by jcant0n\n\nuniform vec2 iResolution;\nuniform sampler2D uSampler;\nuniform vec2 iMouse;\nuniform float blur;\n\nconst int nsamples = 30;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    vec2 center = iMouse.xy / iResolution.xy;\n    vec2 uv = vTextureCoord.xy;\n//    vec2 center = iMouse - (uv / iResolution);\n    vec4 color = vec4(0.0);\n\n    if(distance(uv, center) < 0.2)\n        {\n\t        gl_FragColor = texture2D(uSampler, uv);\n        }\n    else\n        {\n         float blurStart = 1.0;\n         float blurWidth = 0.02;\n         float precompute = blur * (1.0 / float(nsamples - 1));\n\n         uv -= center;\n         for(int i = 0; i < nsamples; i++)\n         {\n               float scale = blurStart + (float(i)* precompute);\n               color += texture2D(uSampler, uv * scale + center);\n         }\n         color /= float(nsamples);\n         gl_FragColor = color;\n     }\n}\n",{iResolution:{type:"v2",value:{x:1920,y:1080}},iMouse:{type:"v2",value:{x:10,y:10.8}},blur:{type:"f",value:.01}}),this.iResolution=[1e3,556],this.iMouse=[10,10],this.blur=.01}t.prototype=Object.create(PIXI.Filter.prototype),t.prototype.constructor=t,n.exports=t,Object.defineProperties(t.prototype,{iMouse:{get:function(){return this.uniforms.iMouse},set:function(e){this.uniforms.iMouse=e}},iResolution:{get:function(){return this.uniforms.iResolution},set:function(e){this.uniforms.iResolution=e}},blur:{get:function(){return this.uniforms.blur},set:function(e){this.uniforms.blur=e}}})},{}],8:[function(e,n,o){function t(e,n,o){PIXI.Filter.call(this,"precision mediump float;\n#define GLSLIFY 1\n\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform float thickness;\nuniform vec4 outlineColor;\nuniform float pixelWidth;\nuniform float pixelHeight;\nvec2 px = vec2(pixelWidth, pixelHeight);\n\nvoid main(void) {\n    const float PI = 3.14159265358979323846264;\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\n    vec4 curColor;\n    float maxAlpha = 0.;\n    for (float angle = 0.; angle < PI * 2.; angle +=  + (1 / thickness).toFixed(7) + ) {\n        curColor = texture2D(uSampler, vec2(vTextureCoord.x + thickness * px.x * cos(angle), vTextureCoord.y + thickness * px.y * sin(angle)));\n        maxAlpha = max(maxAlpha, curColor.a);\n    }\n    float resultAlpha = max(maxAlpha, ownColor.a);\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\n}\n","#define GLSLIFY 1\nvarying vec4 vColor;\nvarying vec2 vTextureCoord;\nuniform sampler2D u_texture; //diffuse map\nuniform sampler2D u_lightmap;   //light map\nuniform vec2 resolution; //resolution of screen\nuniform vec4 ambientColor; //ambient RGB, alpha channel is intensity\nvoid main() {\n    vec4 diffuseColor = texture2D(u_texture, vTextureCoord);\n    vec2 lighCoord = (gl_FragCoord.xy / resolution.xy);\n    vec4 light = texture2D(u_lightmap, vTextureCoord);\n    vec3 ambient = ambientColor.rgb * ambientColor.a;\n    vec3 intensity = ambient + light.rgb;\n    vec3 finalColor = diffuseColor.rgb * intensity;\n    gl_FragColor = vColor * vec4(finalColor, diffuseColor.a);\n}\n"),this.uniforms.u_lightmap=e,this.uniforms.resolution=new Float32Array(o||[1,1]),this.uniforms.ambientColor=new Float32Array(n)}t.prototype=Object.create(PIXI.Filter.prototype),t.prototype.constructor=t,Object.defineProperties(t.prototype,{texture:{get:function(){return this.uniforms.u_lightmap},set:function(e){this.uniforms.u_lightmap=e}},color:{get:function(){return this.uniforms.ambientColor},set:function(e){this.uniforms.ambientColor=new Float32Array(e)}},resolution:{get:function(){return this.uniforms.resolution},set:function(e){this.uniforms.resolution=new Float32Array(e)}}}),n.exports=t},{}],9:[function(e,n,o){n.exports={GlowFilter:e("./filters/glow/GlowFilter"),OutlineFilter:e("./filters/outline/OutlineFilter"),BulgePinchFilter:e("./filters/bulgepinch/BulgePinchFilter"),ColorReplaceFilter:e("./filters/colorreplace/ColorReplaceFilter"),SimpleLightmapFilter:e("./filters/simplelightmap/SimpleLightmapFilter"),RadialBlur:e("./filters/radialblur/RadialblurFilter"),RadialBlurMask:e("./filters/radialblurmask/RadialblurMaskFilter"),HashedBlur:e("./filters/hashedblur/HashedblurFilter")};for(var t in n.exports)PIXI.filters[t]=n.exports[t]},{"./filters/bulgepinch/BulgePinchFilter":1,"./filters/colorreplace/ColorReplaceFilter":2,"./filters/glow/GlowFilter":3,"./filters/hashedblur/HashedblurFilter":4,"./filters/outline/OutlineFilter":5,"./filters/radialblur/RadialblurFilter":6,"./filters/radialblurmask/RadialblurMaskFilter":7,"./filters/simplelightmap/SimpleLightmapFilter":8}]},{},[9]);